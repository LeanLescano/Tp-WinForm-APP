<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RK5CYII=
</value>
  </data>
</root>